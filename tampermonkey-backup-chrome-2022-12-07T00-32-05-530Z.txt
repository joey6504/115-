{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"115转存助手ui优化版3.5改","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://115.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["https://115.com/s/*"],"merge_excludes":true,"use_connects":[],"orig_connects":["proapi.115.com","webapi.115.com","115.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1670372041774,"data":{"setTaskCancel":"bfalse","Cfg4ne":"s{\"createRootFolderDefaultValue\":false,\"createChildFolderVisible\":true,\"createItemSha1\":true,\"createItemSha1InThumb\":true,\"advancedRename\":false,\"autoUseSeparator\":true,\"autoUseSeparatorToRename\":true,\"separator\":\"變\",\"uploadNumber\":\"4\",\"uploadSleepTime\":\"500\",\"downloadNumber\":\"4\",\"downloadSleepTime\":\"1300\",\"createFolderSleepTime\":\"300\"}"}},"enabled":true,"position":1,"uuid":"85fbea62-a8cd-4e6f-ac14-ea1d539ec14f","source":"","requires":[{"meta":{"name":"underscore-min.js","url":"https://unpkg.com/underscore@1.12.0/underscore-min.js","ts":1670371893015,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert2@11.3.0","url":"https://unpkg.com/sweetalert2@11.3.0","ts":1670371893018,"mimetype":"text/plain"},"source":""},{"meta":{"name":"forge.min.js","url":"https://unpkg.com/node-forge@0.10.0/dist/forge.min.js","ts":1670371893027,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"emoutils.min.js","url":"https://unpkg.com/emoutils@2.0.0/dist/umd/emoutils.min.js","ts":1670371893027,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKHUsZSl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT9lKGV4cG9ydHMpOiJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFsiZXhwb3J0cyJdLGUpOmUodS5lbW9qaVV0aWxzPXt9KX0odGhpcyxmdW5jdGlvbih1KXsidXNlIHN0cmljdCI7dmFyIGU9Wy9cdWZlMGUvLC9cdWZlMGYvLC9cdTIwZTMvXSx0PVsvXHVkODNjW1x1ZGRlNi1cdWRkZmZdXHVkODNjW1x1ZGRlNi1cdWRkZmZdLywvXHVkODNjXHVkZmY0KD86XHVkYjQwW1x1ZGMyMC1cdWRjN2VdKSs/XHVkYjQwXHVkYzdmLywvW1x1ZDgwMC1cdWRiZmZdW1x1ZGMwMC1cdWRmZmZdLyxuZXcgUmVnRXhwKCIuKD86IitlLm1hcChmdW5jdGlvbih1KXtyZXR1cm4gdS5zb3VyY2V9KS5qb2luKCJ8IikrIikrIiksL1tcdTIzMUFcdTIzMUJcdTIzRTktXHUyM0VDXHUyM0YwXHUyM0YzXHUyNUZEXHUyNUZFXHUyNjE0XHUyNjE1XHUyNjQ4LVx1MjY1M1x1MjY3Rlx1MjY5M1x1MjZBMVx1MjZBQVx1MjZBQlx1MjZCRFx1MjZCRVx1MjZDNFx1MjZDNVx1MjZDRVx1MjZENFx1MjZFQVx1MjZGMlx1MjZGM1x1MjZGNVx1MjZGQVx1MjZGRFx1MjcwNVx1MjcwQVx1MjcwQlx1MjcyOFx1Mjc0Q1x1Mjc0RVx1Mjc1My1cdTI3NTVcdTI3NTdcdTI3OTUtXHUyNzk3XHUyN0IwXHUyN0JGXHUyQjFCXHUyQjFDXHUyQjUwXHUyQjU1XHUwMEE5XHUwMEFFXHUyMDNDXHUyMDQ5XHUyMTIyXHUyMTM5XHUyMTk0XHUyMTk1XHUyMTk2XHUyMTk3XHUyMTk4XHUyMTk5XHUyMUE5XHUyMUFBXHUyMzI4XHUyM0NGXHUyM0VELVx1MjNFRlx1MjNGMVx1MjNGMlx1MjNGOC1cdTIzRkFcdTI0QzJcdTI1QUFcdTI1QUJcdTI1QjZcdTI1QzBcdTI1RkJcdTI1RkNcdTI2MDAtXHUyNjA0XHUyNjBFXHUyNjExXHUyNjE4XHUyNjFEXHUyNjIwXHUyNjIyXHUyNjIzXHUyNjI2XHUyNjJBXHUyNjJFXHUyNjJGXHUyNjM4LVx1MjYzYVx1MjY0MFx1MjY0Mlx1MjY1Rlx1MjY2MFx1MjY2M1x1MjY2NVx1MjY2Nlx1MjY2OFx1MjY3Qlx1MjY3RVx1MjY5Mlx1MjY5NC1cdTI2OTdcdTI2OTlcdTI2OUJcdTI2OUNcdTI2QTBcdTI2QTdcdTI2QjBcdTI2QjFcdTI2QzhcdTI2Q0ZcdTI2RDFcdTI2RDNcdTI2RTlcdTI2RjBcdTI2RjFcdTI2RjRcdTI2RjdcdTI2RjhcdTI2RjlcdTI3MDJcdTI3MDhcdTI3MDlcdTI3MENcdTI3MERcdTI3MEZcdTI3MTJcdTI3MTRcdTI3MTZcdTI3MURcdTI3MjFcdTI3MzNcdTI3MzRcdTI3NDRcdTI3NDdcdTI3NjNcdTI3NjRcdTI3QTFcdTI5MzRcdTI5MzVcdTJCMDUtXHUyYjA3XHUzMDMwXHUzMDNEXHUzMjk3XHUzMjk5XHUyNjFEXHUyNkY5XHUyNzBBLVx1MjcwZF0vXSxlPVsvXHVkODNjW1x1ZGZmYi1cdWRmZmZdL10uY29uY2F0KGUpLG89InRleHQiLGk9Im90aGVyIixyPW5ldyBSZWdFeHAoIl4iKy9cdTIwMGQvLnNvdXJjZSksYz1uZXcgUmVnRXhwKCJeKD86Iit0Lm1hcChmdW5jdGlvbih1KXtyZXR1cm4gdS5zb3VyY2V9KS5qb2luKCJ8IikrIikiKSxmPW5ldyBSZWdFeHAoIig/OiIrdC5tYXAoZnVuY3Rpb24odSl7cmV0dXJuIHUuc291cmNlfSkuam9pbigifCIpKyIpIiksZD1uZXcgUmVnRXhwKGMuc291cmNlKyIoPzoiK2UubWFwKGZ1bmN0aW9uKHUpe3JldHVybiIoPzoiK3Uuc291cmNlKyIpIn0pLmpvaW4oInwiKSsiKSoiKSxzPW5ldyBSZWdFeHAoZi5zb3VyY2UrIig/OiIrZS5tYXAoZnVuY3Rpb24odSl7cmV0dXJuIig/OiIrdS5zb3VyY2UrIikifSkuam9pbigifCIpKyIpKiIpO2Z1bmN0aW9uIGgodSl7dmFyIGUsdD0hKDE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdKXx8YXJndW1lbnRzWzFdLG49IiI7cmV0dXJuKHQ/YzpmKS50ZXN0KHUpJiYobis9KGU9dS5tYXRjaCh0P2Q6cykpWzBdLHU9dS5zdWJzdHIodS5pbmRleE9mKG4pK2VbMF0ubGVuZ3RoKSxuKz0odD0iIiwodT0oZT11KS5tYXRjaChyKSkmJih0Kz11WzBdLHQrPWgoZT1lLnN1YnN0cih1WzBdLmxlbmd0aCkpKSx0KSksbn1mdW5jdGlvbiBuKHUpe2Zvcih2YXIgZT0wPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PXU/dToiIix0PVtdOzA8ZS5sZW5ndGg7KXZhciBuLHI9aChlLCExKSxlPXI/KDA8KG49ZS5pbmRleE9mKHIpKSYmdC5wdXNoKHt0ZXh0OmUuc2xpY2UoMCxuKSx0eXBlOm99KSx0LnB1c2goe3RleHQ6cix0eXBlOml9KSxlLnNsaWNlKG4rci5sZW5ndGgpKToodC5wdXNoKHt0ZXh0OmUsdHlwZTpvfSksIiIpO3JldHVybiB0fWZ1bmN0aW9uIGwoKXt2YXIgdSxlPTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToiIix0PSExO3JldHVybiB0PTA8ZS5sZW5ndGg/KHU9aChlKSkmJnUubGVuZ3RoPT09ZS5sZW5ndGg6dH1mdW5jdGlvbiBnKCl7Zm9yKHZhciB1PTA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToiIjswPHUubGVuZ3RoOyl7dmFyIGU9aCh1KTtpZihlKXJldHVybiEwO2U9ZS5sZW5ndGh8fDEsdT11LnN1YnN0cihlKX1yZXR1cm4hMX1mdW5jdGlvbiBhKCl7cmV0dXJuKDA8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXToiIikuc3BsaXQoIiIpLm1hcChmdW5jdGlvbih1KXtyZXR1cm4iXFx1IisoZT11LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLHQ9NCx1PSIwIix0Pj49MCx1PVN0cmluZyh2b2lkIDAhPT11P3U6IiAiKSxlLmxlbmd0aD50P2U6KCh0LT1lLmxlbmd0aCk+dS5sZW5ndGgmJih1Kz11LnJlcGVhdCh0L3UubGVuZ3RoKSksdS5zbGljZSgwLHQpK2UpKTt2YXIgZSx0fSl9ZnVuY3Rpb24gcCgpe2Zvcih2YXIgdT0wLGU9bigwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06IiIpLHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLnR5cGU9PT1vP3UrPWVbdF0udGV4dC5sZW5ndGg6dSs9MTtyZXR1cm4gdX1mdW5jdGlvbiBGKCl7dmFyIHU9MDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOiIiLGU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsdD0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MS8wLHU9QSh1KTtyZXR1cm4gZTwwJiYoZT11Lmxlbmd0aCtlKSx1LnNsaWNlKGUsZSt0KS5qb2luKCIiKX1mdW5jdGlvbiBBKCl7Zm9yKHZhciB1PVtdLGU9bigwPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06IiIpLHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLnR5cGU9PT1vP3U9dS5jb25jYXQoZVt0XS50ZXh0LnNwbGl0KCIiKSk6dS5wdXNoKGVbdF0udGV4dCk7cmV0dXJuIHV9ZT17aXNFbW9qaTpsLGNvbnRhaW5zRW1vamk6ZyxzdHIydW5pY29kZUFycmF5OmEsbGVuZ3RoOnAsc3Vic3RyOkYsbWF0Y2hPbmVFbW9qaTpoLHRvQXJyYXk6QX07dS5tYXRjaE9uZUVtb2ppPWgsdS5pc0Vtb2ppPWwsdS5jb250YWluc0Vtb2ppPWcsdS5zdHIydW5pY29kZUFycmF5PWEsdS5sZW5ndGg9cCx1LnN1YnN0cj1GLHUudG9BcnJheT1BLHUuZGVmYXVsdD1lLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KX0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1lbW91dGlscy5taW4uanMubWFwCg=="},{"meta":{"name":"md5.min.js","url":"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js","ts":1670371893028,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiB0KG4sdCl7dmFyIHI9KDY1NTM1Jm4pKyg2NTUzNSZ0KTtyZXR1cm4obj4+MTYpKyh0Pj4xNikrKHI+PjE2KTw8MTZ8NjU1MzUmcn1mdW5jdGlvbiByKG4sdCl7cmV0dXJuIG48PHR8bj4+PjMyLXR9ZnVuY3Rpb24gZShuLGUsbyx1LGMsZil7cmV0dXJuIHQocih0KHQoZSxuKSx0KHUsZikpLGMpLG8pfWZ1bmN0aW9uIG8obix0LHIsbyx1LGMsZil7cmV0dXJuIGUodCZyfH50Jm8sbix0LHUsYyxmKX1mdW5jdGlvbiB1KG4sdCxyLG8sdSxjLGYpe3JldHVybiBlKHQmb3xyJn5vLG4sdCx1LGMsZil9ZnVuY3Rpb24gYyhuLHQscixvLHUsYyxmKXtyZXR1cm4gZSh0XnJebyxuLHQsdSxjLGYpfWZ1bmN0aW9uIGYobix0LHIsbyx1LGMsZil7cmV0dXJuIGUocl4odHx+byksbix0LHUsYyxmKX1mdW5jdGlvbiBpKG4scil7bltyPj41XXw9MTI4PDxyJTMyLG5bMTQrKHIrNjQ+Pj45PDw0KV09cjt2YXIgZSxpLGEsZCxoLGw9MTczMjU4NDE5MyxnPS0yNzE3MzM4Nzksdj0tMTczMjU4NDE5NCxtPTI3MTczMzg3ODtmb3IoZT0wO2U8bi5sZW5ndGg7ZSs9MTYpaT1sLGE9ZyxkPXYsaD1tLGc9ZihnPWYoZz1mKGc9ZihnPWMoZz1jKGc9YyhnPWMoZz11KGc9dShnPXUoZz11KGc9byhnPW8oZz1vKGc9byhnLHY9byh2LG09byhtLGw9byhsLGcsdixtLG5bZV0sNywtNjgwODc2OTM2KSxnLHYsbltlKzFdLDEyLC0zODk1NjQ1ODYpLGwsZyxuW2UrMl0sMTcsNjA2MTA1ODE5KSxtLGwsbltlKzNdLDIyLC0xMDQ0NTI1MzMwKSx2PW8odixtPW8obSxsPW8obCxnLHYsbSxuW2UrNF0sNywtMTc2NDE4ODk3KSxnLHYsbltlKzVdLDEyLDEyMDAwODA0MjYpLGwsZyxuW2UrNl0sMTcsLTE0NzMyMzEzNDEpLG0sbCxuW2UrN10sMjIsLTQ1NzA1OTgzKSx2PW8odixtPW8obSxsPW8obCxnLHYsbSxuW2UrOF0sNywxNzcwMDM1NDE2KSxnLHYsbltlKzldLDEyLC0xOTU4NDE0NDE3KSxsLGcsbltlKzEwXSwxNywtNDIwNjMpLG0sbCxuW2UrMTFdLDIyLC0xOTkwNDA0MTYyKSx2PW8odixtPW8obSxsPW8obCxnLHYsbSxuW2UrMTJdLDcsMTgwNDYwMzY4MiksZyx2LG5bZSsxM10sMTIsLTQwMzQxMTAxKSxsLGcsbltlKzE0XSwxNywtMTUwMjAwMjI5MCksbSxsLG5bZSsxNV0sMjIsMTIzNjUzNTMyOSksdj11KHYsbT11KG0sbD11KGwsZyx2LG0sbltlKzFdLDUsLTE2NTc5NjUxMCksZyx2LG5bZSs2XSw5LC0xMDY5NTAxNjMyKSxsLGcsbltlKzExXSwxNCw2NDM3MTc3MTMpLG0sbCxuW2VdLDIwLC0zNzM4OTczMDIpLHY9dSh2LG09dShtLGw9dShsLGcsdixtLG5bZSs1XSw1LC03MDE1NTg2OTEpLGcsdixuW2UrMTBdLDksMzgwMTYwODMpLGwsZyxuW2UrMTVdLDE0LC02NjA0NzgzMzUpLG0sbCxuW2UrNF0sMjAsLTQwNTUzNzg0OCksdj11KHYsbT11KG0sbD11KGwsZyx2LG0sbltlKzldLDUsNTY4NDQ2NDM4KSxnLHYsbltlKzE0XSw5LC0xMDE5ODAzNjkwKSxsLGcsbltlKzNdLDE0LC0xODczNjM5NjEpLG0sbCxuW2UrOF0sMjAsMTE2MzUzMTUwMSksdj11KHYsbT11KG0sbD11KGwsZyx2LG0sbltlKzEzXSw1LC0xNDQ0NjgxNDY3KSxnLHYsbltlKzJdLDksLTUxNDAzNzg0KSxsLGcsbltlKzddLDE0LDE3MzUzMjg0NzMpLG0sbCxuW2UrMTJdLDIwLC0xOTI2NjA3NzM0KSx2PWModixtPWMobSxsPWMobCxnLHYsbSxuW2UrNV0sNCwtMzc4NTU4KSxnLHYsbltlKzhdLDExLC0yMDIyNTc0NDYzKSxsLGcsbltlKzExXSwxNiwxODM5MDMwNTYyKSxtLGwsbltlKzE0XSwyMywtMzUzMDk1NTYpLHY9Yyh2LG09YyhtLGw9YyhsLGcsdixtLG5bZSsxXSw0LC0xNTMwOTkyMDYwKSxnLHYsbltlKzRdLDExLDEyNzI4OTMzNTMpLGwsZyxuW2UrN10sMTYsLTE1NTQ5NzYzMiksbSxsLG5bZSsxMF0sMjMsLTEwOTQ3MzA2NDApLHY9Yyh2LG09YyhtLGw9YyhsLGcsdixtLG5bZSsxM10sNCw2ODEyNzkxNzQpLGcsdixuW2VdLDExLC0zNTg1MzcyMjIpLGwsZyxuW2UrM10sMTYsLTcyMjUyMTk3OSksbSxsLG5bZSs2XSwyMyw3NjAyOTE4OSksdj1jKHYsbT1jKG0sbD1jKGwsZyx2LG0sbltlKzldLDQsLTY0MDM2NDQ4NyksZyx2LG5bZSsxMl0sMTEsLTQyMTgxNTgzNSksbCxnLG5bZSsxNV0sMTYsNTMwNzQyNTIwKSxtLGwsbltlKzJdLDIzLC05OTUzMzg2NTEpLHY9Zih2LG09ZihtLGw9ZihsLGcsdixtLG5bZV0sNiwtMTk4NjMwODQ0KSxnLHYsbltlKzddLDEwLDExMjY4OTE0MTUpLGwsZyxuW2UrMTRdLDE1LC0xNDE2MzU0OTA1KSxtLGwsbltlKzVdLDIxLC01NzQzNDA1NSksdj1mKHYsbT1mKG0sbD1mKGwsZyx2LG0sbltlKzEyXSw2LDE3MDA0ODU1NzEpLGcsdixuW2UrM10sMTAsLTE4OTQ5ODY2MDYpLGwsZyxuW2UrMTBdLDE1LC0xMDUxNTIzKSxtLGwsbltlKzFdLDIxLC0yMDU0OTIyNzk5KSx2PWYodixtPWYobSxsPWYobCxnLHYsbSxuW2UrOF0sNiwxODczMzEzMzU5KSxnLHYsbltlKzE1XSwxMCwtMzA2MTE3NDQpLGwsZyxuW2UrNl0sMTUsLTE1NjAxOTgzODApLG0sbCxuW2UrMTNdLDIxLDEzMDkxNTE2NDkpLHY9Zih2LG09ZihtLGw9ZihsLGcsdixtLG5bZSs0XSw2LC0xNDU1MjMwNzApLGcsdixuW2UrMTFdLDEwLC0xMTIwMjEwMzc5KSxsLGcsbltlKzJdLDE1LDcxODc4NzI1OSksbSxsLG5bZSs5XSwyMSwtMzQzNDg1NTUxKSxsPXQobCxpKSxnPXQoZyxhKSx2PXQodixkKSxtPXQobSxoKTtyZXR1cm5bbCxnLHYsbV19ZnVuY3Rpb24gYShuKXt2YXIgdCxyPSIiLGU9MzIqbi5sZW5ndGg7Zm9yKHQ9MDt0PGU7dCs9OClyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKG5bdD4+NV0+Pj50JTMyJjI1NSk7cmV0dXJuIHJ9ZnVuY3Rpb24gZChuKXt2YXIgdCxyPVtdO2ZvcihyWyhuLmxlbmd0aD4+MiktMV09dm9pZCAwLHQ9MDt0PHIubGVuZ3RoO3QrPTEpclt0XT0wO3ZhciBlPTgqbi5sZW5ndGg7Zm9yKHQ9MDt0PGU7dCs9OClyW3Q+PjVdfD0oMjU1Jm4uY2hhckNvZGVBdCh0LzgpKTw8dCUzMjtyZXR1cm4gcn1mdW5jdGlvbiBoKG4pe3JldHVybiBhKGkoZChuKSw4Km4ubGVuZ3RoKSl9ZnVuY3Rpb24gbChuLHQpe3ZhciByLGUsbz1kKG4pLHU9W10sYz1bXTtmb3IodVsxNV09Y1sxNV09dm9pZCAwLG8ubGVuZ3RoPjE2JiYobz1pKG8sOCpuLmxlbmd0aCkpLHI9MDtyPDE2O3IrPTEpdVtyXT05MDk1MjI0ODZeb1tyXSxjW3JdPTE1NDk1NTY4Mjheb1tyXTtyZXR1cm4gZT1pKHUuY29uY2F0KGQodCkpLDUxMis4KnQubGVuZ3RoKSxhKGkoYy5jb25jYXQoZSksNjQwKSl9ZnVuY3Rpb24gZyhuKXt2YXIgdCxyLGU9IiI7Zm9yKHI9MDtyPG4ubGVuZ3RoO3IrPTEpdD1uLmNoYXJDb2RlQXQociksZSs9IjAxMjM0NTY3ODlhYmNkZWYiLmNoYXJBdCh0Pj4+NCYxNSkrIjAxMjM0NTY3ODlhYmNkZWYiLmNoYXJBdCgxNSZ0KTtyZXR1cm4gZX1mdW5jdGlvbiB2KG4pe3JldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQobikpfWZ1bmN0aW9uIG0obil7cmV0dXJuIGgodihuKSl9ZnVuY3Rpb24gcChuKXtyZXR1cm4gZyhtKG4pKX1mdW5jdGlvbiBzKG4sdCl7cmV0dXJuIGwodihuKSx2KHQpKX1mdW5jdGlvbiBDKG4sdCl7cmV0dXJuIGcocyhuLHQpKX1mdW5jdGlvbiBBKG4sdCxyKXtyZXR1cm4gdD9yP3ModCxuKTpDKHQsbik6cj9tKG4pOnAobil9ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gQX0pOiJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1BOm4ubWQ1PUF9KHRoaXMpOwovLyMgc291cmNlTWFwcGluZ1VSTD1tZDUubWluLmpzLm1hcA=="},{"meta":{"name":"BigInteger.min.js","url":"https://peterolson.github.io/BigInteger.js/BigInteger.min.js","ts":1670371893035,"mimetype":"text/javascript"},"source":""}]},{"name":"fake 115Browser download","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://115.com/*","*://v.anxia.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["proapi.115.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1670371893078,"data":{}},"enabled":true,"position":2,"uuid":"ddce0468-3829-4311-bb30-15ea978f3eb1","source":"","requires":[{"meta":{"name":"BigInteger.min.js","url":"https://peterolson.github.io/BigInteger.js/BigInteger.min.js","ts":1670371893075,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"md5.min.js","url":"https://cdn.bootcdn.net/ajax/libs/blueimp-md5/2.18.0/js/md5.min.js","ts":1670371893075,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBkKG4sdCl7dmFyIHI9KDY1NTM1Jm4pKyg2NTUzNSZ0KTtyZXR1cm4obj4+MTYpKyh0Pj4xNikrKHI+PjE2KTw8MTZ8NjU1MzUmcn1mdW5jdGlvbiBmKG4sdCxyLGUsbyx1KXtyZXR1cm4gZCgoYz1kKGQodCxuKSxkKGUsdSkpKTw8KGY9byl8Yz4+PjMyLWYscik7dmFyIGMsZn1mdW5jdGlvbiBsKG4sdCxyLGUsbyx1LGMpe3JldHVybiBmKHQmcnx+dCZlLG4sdCxvLHUsYyl9ZnVuY3Rpb24gdihuLHQscixlLG8sdSxjKXtyZXR1cm4gZih0JmV8ciZ+ZSxuLHQsbyx1LGMpfWZ1bmN0aW9uIGcobix0LHIsZSxvLHUsYyl7cmV0dXJuIGYodF5yXmUsbix0LG8sdSxjKX1mdW5jdGlvbiBtKG4sdCxyLGUsbyx1LGMpe3JldHVybiBmKHJeKHR8fmUpLG4sdCxvLHUsYyl9ZnVuY3Rpb24gaShuLHQpe3ZhciByLGUsbyx1O25bdD4+NV18PTEyODw8dCUzMixuWzE0Kyh0KzY0Pj4+OTw8NCldPXQ7Zm9yKHZhciBjPTE3MzI1ODQxOTMsZj0tMjcxNzMzODc5LGk9LTE3MzI1ODQxOTQsYT0yNzE3MzM4NzgsaD0wO2g8bi5sZW5ndGg7aCs9MTYpYz1sKHI9YyxlPWYsbz1pLHU9YSxuW2hdLDcsLTY4MDg3NjkzNiksYT1sKGEsYyxmLGksbltoKzFdLDEyLC0zODk1NjQ1ODYpLGk9bChpLGEsYyxmLG5baCsyXSwxNyw2MDYxMDU4MTkpLGY9bChmLGksYSxjLG5baCszXSwyMiwtMTA0NDUyNTMzMCksYz1sKGMsZixpLGEsbltoKzRdLDcsLTE3NjQxODg5NyksYT1sKGEsYyxmLGksbltoKzVdLDEyLDEyMDAwODA0MjYpLGk9bChpLGEsYyxmLG5baCs2XSwxNywtMTQ3MzIzMTM0MSksZj1sKGYsaSxhLGMsbltoKzddLDIyLC00NTcwNTk4MyksYz1sKGMsZixpLGEsbltoKzhdLDcsMTc3MDAzNTQxNiksYT1sKGEsYyxmLGksbltoKzldLDEyLC0xOTU4NDE0NDE3KSxpPWwoaSxhLGMsZixuW2grMTBdLDE3LC00MjA2MyksZj1sKGYsaSxhLGMsbltoKzExXSwyMiwtMTk5MDQwNDE2MiksYz1sKGMsZixpLGEsbltoKzEyXSw3LDE4MDQ2MDM2ODIpLGE9bChhLGMsZixpLG5baCsxM10sMTIsLTQwMzQxMTAxKSxpPWwoaSxhLGMsZixuW2grMTRdLDE3LC0xNTAyMDAyMjkwKSxjPXYoYyxmPWwoZixpLGEsYyxuW2grMTVdLDIyLDEyMzY1MzUzMjkpLGksYSxuW2grMV0sNSwtMTY1Nzk2NTEwKSxhPXYoYSxjLGYsaSxuW2grNl0sOSwtMTA2OTUwMTYzMiksaT12KGksYSxjLGYsbltoKzExXSwxNCw2NDM3MTc3MTMpLGY9dihmLGksYSxjLG5baF0sMjAsLTM3Mzg5NzMwMiksYz12KGMsZixpLGEsbltoKzVdLDUsLTcwMTU1ODY5MSksYT12KGEsYyxmLGksbltoKzEwXSw5LDM4MDE2MDgzKSxpPXYoaSxhLGMsZixuW2grMTVdLDE0LC02NjA0NzgzMzUpLGY9dihmLGksYSxjLG5baCs0XSwyMCwtNDA1NTM3ODQ4KSxjPXYoYyxmLGksYSxuW2grOV0sNSw1Njg0NDY0MzgpLGE9dihhLGMsZixpLG5baCsxNF0sOSwtMTAxOTgwMzY5MCksaT12KGksYSxjLGYsbltoKzNdLDE0LC0xODczNjM5NjEpLGY9dihmLGksYSxjLG5baCs4XSwyMCwxMTYzNTMxNTAxKSxjPXYoYyxmLGksYSxuW2grMTNdLDUsLTE0NDQ2ODE0NjcpLGE9dihhLGMsZixpLG5baCsyXSw5LC01MTQwMzc4NCksaT12KGksYSxjLGYsbltoKzddLDE0LDE3MzUzMjg0NzMpLGM9ZyhjLGY9dihmLGksYSxjLG5baCsxMl0sMjAsLTE5MjY2MDc3MzQpLGksYSxuW2grNV0sNCwtMzc4NTU4KSxhPWcoYSxjLGYsaSxuW2grOF0sMTEsLTIwMjI1NzQ0NjMpLGk9ZyhpLGEsYyxmLG5baCsxMV0sMTYsMTgzOTAzMDU2MiksZj1nKGYsaSxhLGMsbltoKzE0XSwyMywtMzUzMDk1NTYpLGM9ZyhjLGYsaSxhLG5baCsxXSw0LC0xNTMwOTkyMDYwKSxhPWcoYSxjLGYsaSxuW2grNF0sMTEsMTI3Mjg5MzM1MyksaT1nKGksYSxjLGYsbltoKzddLDE2LC0xNTU0OTc2MzIpLGY9ZyhmLGksYSxjLG5baCsxMF0sMjMsLTEwOTQ3MzA2NDApLGM9ZyhjLGYsaSxhLG5baCsxM10sNCw2ODEyNzkxNzQpLGE9ZyhhLGMsZixpLG5baF0sMTEsLTM1ODUzNzIyMiksaT1nKGksYSxjLGYsbltoKzNdLDE2LC03MjI1MjE5NzkpLGY9ZyhmLGksYSxjLG5baCs2XSwyMyw3NjAyOTE4OSksYz1nKGMsZixpLGEsbltoKzldLDQsLTY0MDM2NDQ4NyksYT1nKGEsYyxmLGksbltoKzEyXSwxMSwtNDIxODE1ODM1KSxpPWcoaSxhLGMsZixuW2grMTVdLDE2LDUzMDc0MjUyMCksYz1tKGMsZj1nKGYsaSxhLGMsbltoKzJdLDIzLC05OTUzMzg2NTEpLGksYSxuW2hdLDYsLTE5ODYzMDg0NCksYT1tKGEsYyxmLGksbltoKzddLDEwLDExMjY4OTE0MTUpLGk9bShpLGEsYyxmLG5baCsxNF0sMTUsLTE0MTYzNTQ5MDUpLGY9bShmLGksYSxjLG5baCs1XSwyMSwtNTc0MzQwNTUpLGM9bShjLGYsaSxhLG5baCsxMl0sNiwxNzAwNDg1NTcxKSxhPW0oYSxjLGYsaSxuW2grM10sMTAsLTE4OTQ5ODY2MDYpLGk9bShpLGEsYyxmLG5baCsxMF0sMTUsLTEwNTE1MjMpLGY9bShmLGksYSxjLG5baCsxXSwyMSwtMjA1NDkyMjc5OSksYz1tKGMsZixpLGEsbltoKzhdLDYsMTg3MzMxMzM1OSksYT1tKGEsYyxmLGksbltoKzE1XSwxMCwtMzA2MTE3NDQpLGk9bShpLGEsYyxmLG5baCs2XSwxNSwtMTU2MDE5ODM4MCksZj1tKGYsaSxhLGMsbltoKzEzXSwyMSwxMzA5MTUxNjQ5KSxjPW0oYyxmLGksYSxuW2grNF0sNiwtMTQ1NTIzMDcwKSxhPW0oYSxjLGYsaSxuW2grMTFdLDEwLC0xMTIwMjEwMzc5KSxpPW0oaSxhLGMsZixuW2grMl0sMTUsNzE4Nzg3MjU5KSxmPW0oZixpLGEsYyxuW2grOV0sMjEsLTM0MzQ4NTU1MSksYz1kKGMsciksZj1kKGYsZSksaT1kKGksbyksYT1kKGEsdSk7cmV0dXJuW2MsZixpLGFdfWZ1bmN0aW9uIGEobil7Zm9yKHZhciB0PSIiLHI9MzIqbi5sZW5ndGgsZT0wO2U8cjtlKz04KXQrPVN0cmluZy5mcm9tQ2hhckNvZGUobltlPj41XT4+PmUlMzImMjU1KTtyZXR1cm4gdH1mdW5jdGlvbiBoKG4pe3ZhciB0PVtdO2Zvcih0WyhuLmxlbmd0aD4+MiktMV09dm9pZCAwLGU9MDtlPHQubGVuZ3RoO2UrPTEpdFtlXT0wO2Zvcih2YXIgcj04Km4ubGVuZ3RoLGU9MDtlPHI7ZSs9OCl0W2U+PjVdfD0oMjU1Jm4uY2hhckNvZGVBdChlLzgpKTw8ZSUzMjtyZXR1cm4gdH1mdW5jdGlvbiBlKG4pe2Zvcih2YXIgdCxyPSIwMTIzNDU2Nzg5YWJjZGVmIixlPSIiLG89MDtvPG4ubGVuZ3RoO28rPTEpdD1uLmNoYXJDb2RlQXQobyksZSs9ci5jaGFyQXQodD4+PjQmMTUpK3IuY2hhckF0KDE1JnQpO3JldHVybiBlfWZ1bmN0aW9uIHIobil7cmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChuKSl9ZnVuY3Rpb24gbyhuKXtyZXR1cm4gYShpKGgodD1yKG4pKSw4KnQubGVuZ3RoKSk7dmFyIHR9ZnVuY3Rpb24gdShuLHQpe3JldHVybiBmdW5jdGlvbihuLHQpe3ZhciByLGUsbz1oKG4pLHU9W10sYz1bXTtmb3IodVsxNV09Y1sxNV09dm9pZCAwLDE2PG8ubGVuZ3RoJiYobz1pKG8sOCpuLmxlbmd0aCkpLHI9MDtyPDE2O3IrPTEpdVtyXT05MDk1MjI0ODZeb1tyXSxjW3JdPTE1NDk1NTY4Mjheb1tyXTtyZXR1cm4gZT1pKHUuY29uY2F0KGgodCkpLDUxMis4KnQubGVuZ3RoKSxhKGkoYy5jb25jYXQoZSksNjQwKSl9KHIobikscih0KSl9ZnVuY3Rpb24gdChuLHQscil7cmV0dXJuIHQ/cj91KHQsbik6ZSh1KHQsbikpOnI/byhuKTplKG8obikpfSJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIHR9KToib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9dDpuLm1kNT10fSh0aGlzKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWQ1Lm1pbi5qcy5tYXA="}]}],"settings":{"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"},{"reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"],"severity":"8"}]}}